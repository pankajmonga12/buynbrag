<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/mainservice/mainservice_types.php';

interface mainservice_MainserviceIf {
  public function get_products($keyword, $category, $page_no, $rows);
  public function get_people($keyword, $category, $page_no, $rows);
  public function get_store($keyword, $category, $page_no, $rows);
}

class mainservice_MainserviceClient implements mainservice_MainserviceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function get_products($keyword, $category, $page_no, $rows)
  {
    $this->send_get_products($keyword, $category, $page_no, $rows);
    return $this->recv_get_products();
  }

  public function send_get_products($keyword, $category, $page_no, $rows)
  {
    $args = new mainservice_Mainservice_get_products_args();
    $args->keyword = $keyword;
    $args->category = $category;
    $args->page_no = $page_no;
    $args->rows = $rows;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_products', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_products', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_products()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'mainservice_Mainservice_get_products_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new mainservice_Mainservice_get_products_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new Exception("get_products failed: unknown result");
  }

  public function get_people($keyword, $category, $page_no, $rows)
  {
    $this->send_get_people($keyword, $category, $page_no, $rows);
    return $this->recv_get_people();
  }

  public function send_get_people($keyword, $category, $page_no, $rows)
  {
    $args = new mainservice_Mainservice_get_people_args();
    $args->keyword = $keyword;
    $args->category = $category;
    $args->page_no = $page_no;
    $args->rows = $rows;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_people', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_people', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_people()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'mainservice_Mainservice_get_people_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new mainservice_Mainservice_get_people_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new Exception("get_people failed: unknown result");
  }

  public function get_store($keyword, $category, $page_no, $rows)
  {
    $this->send_get_store($keyword, $category, $page_no, $rows);
    return $this->recv_get_store();
  }

  public function send_get_store($keyword, $category, $page_no, $rows)
  {
    $args = new mainservice_Mainservice_get_store_args();
    $args->keyword = $keyword;
    $args->category = $category;
    $args->page_no = $page_no;
    $args->rows = $rows;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_store', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_store', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_store()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'mainservice_Mainservice_get_store_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new mainservice_Mainservice_get_store_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new Exception("get_store failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class mainservice_Mainservice_get_products_args {
  static $_TSPEC;

  public $keyword = null;
  public $category = null;
  public $page_no = null;
  public $rows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keyword'])) {
        $this->keyword = $vals['keyword'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_products_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_products_args');
    if ($this->keyword !== null) {
      $xfer += $output->writeFieldBegin('keyword', TType::STRING, 1);
      $xfer += $output->writeString($this->keyword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 2);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 4);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mainservice_Mainservice_get_products_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'getsearch_Getsearch',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => 'mainservice_InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_products_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new getsearch_Getsearch();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new mainservice_InvalidValueException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_products_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mainservice_Mainservice_get_people_args {
  static $_TSPEC;

  public $keyword = null;
  public $category = null;
  public $page_no = null;
  public $rows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keyword'])) {
        $this->keyword = $vals['keyword'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_people_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_people_args');
    if ($this->keyword !== null) {
      $xfer += $output->writeFieldBegin('keyword', TType::STRING, 1);
      $xfer += $output->writeString($this->keyword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 2);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 4);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mainservice_Mainservice_get_people_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'getsearch_Getsearch',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => 'mainservice_InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_people_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new getsearch_Getsearch();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new mainservice_InvalidValueException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_people_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mainservice_Mainservice_get_store_args {
  static $_TSPEC;

  public $keyword = null;
  public $category = null;
  public $page_no = null;
  public $rows = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keyword'])) {
        $this->keyword = $vals['keyword'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_store_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_store_args');
    if ($this->keyword !== null) {
      $xfer += $output->writeFieldBegin('keyword', TType::STRING, 1);
      $xfer += $output->writeString($this->keyword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 2);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 4);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mainservice_Mainservice_get_store_result {
  static $_TSPEC;

  public $success = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'getsearch_Getsearch',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => 'mainservice_InvalidValueException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'Mainservice_get_store_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new getsearch_Getsearch();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new mainservice_InvalidValueException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mainservice_get_store_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
